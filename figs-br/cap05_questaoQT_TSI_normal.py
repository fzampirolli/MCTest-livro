# -*- coding: utf-8 -*-
"""Untitled100.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z-nWzfCCvgXL73pQJtdqPzA3m7qEdzkT
"""

import matplotlib.pyplot as plt

# Dados
valores = [30,30,30,30,30,30,30,29,29,29,29,29,29,28,28,28,28,28,28,28,28,28,28,27,27,27,27,27,27,27,27,27,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,25,25,25,25,25,25,25,25,25,25,25,25,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,19,19,19,19,19,19,19,19,19,19,18,18,18,18,18,18,18,18,18,18,18,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,16,16,16,16,16,16,16,16,16,16,16,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,14,14,14,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,11,11,10,9,9,8,6,6]


# Plotando o gráfico
plt.figure(figsize=(12, 6))
plt.plot(valores, marker='o', linestyle='-', color='b')
plt.title('Gráfico dos Valores')
plt.xlabel('Índice')
plt.ylabel('Valores')
plt.grid()
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# Dados de acertos
valores = [30, 30, 30, 30, 30, 30, 30, 29, 29, 29, 29, 29, 29, 28, 28, 28, 28,
           28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 26, 26,
           26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
           26, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24, 24,
           24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 23, 23, 23,
           23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
           23, 23, 23, 23, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
           22, 22, 22, 22, 22, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
           21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 20, 20, 20,
           20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
           20, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18,
           18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
           17, 17, 17, 17, 17, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
           15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14, 14,
           14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13, 13, 13, 13, 13, 13,
           13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 11, 11, 10, 9, 9, 8, 6, 6]

# Número total de candidatos
total_candidatos = len(valores)

# Criando os bins para centralizar as barras nos valores inteiros
bins = np.arange(min(valores) - 0.5, max(valores) + 1.5, 1)  # Define bordas para cada número inteiro

# Criando o histograma com frequência
plt.figure(figsize=(12, 6))
sns.histplot(valores, bins=bins, kde=True, color='royalblue', alpha=0.6, stat='count', label='Frequência de Candidatos') # Adiciona legenda ao histograma

# Adicionando a curva de densidade normal ajustada para frequência
mean = np.mean(valores)
std_dev = np.std(valores)
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = stats.norm.pdf(x, mean, std_dev) * total_candidatos * (xmax - xmin) / len(bins)
plt.plot(x, p, 'k', linewidth=2, label='Curva de Densidade Normal')

# Configurações do gráfico
plt.title(f'Distribuição de Acertos em Teste de 30 Questões (n={total_candidatos})', fontsize=14, fontweight='bold')
plt.xlabel('Número de Questões Corretas', fontsize=12)
plt.ylabel('Frequência de Candidatos por Acerto', fontsize=12)

plt.xticks(np.arange(min(valores), max(valores) + 1, 1))  # Garante que os ticks estejam nos números inteiros
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Ajuste da posição dos rótulos das barras
counts, edges = np.histogram(valores, bins=bins)
for count, edge in zip(counts, edges[:-1]):
    if count > 0:  # Apenas exibe rótulos para valores com frequência maior que zero
        plt.text(edge + 0.5, count + 0.1, str(count), ha='center', va='bottom', fontsize=10, fontweight='bold')

plt.savefig('teste0.png')  # Use plt.savefig instead of plt.writefile
# Exibindo o gráfico
plt.show()

