<!DOCTYPE html> 
<html lang='pt' xmlns:epub='http://www.idpf.org/2007/ops' xmlns='http://www.w3.org/1999/xhtml'> 
<head><title>13 MCTest+Moodle+VPL</title> 
<meta charset='UTF-8' /> 
<meta content='TeX4ht (http://www.cse.ohio-state.edu/~gurari/TeX4ht/)' name='generator' /> 
<link href='livro.css' rel='stylesheet' type='text/css' /> 
</head><body>
       <!-- l. 1 --><div class='crosslinks'><p class='noindent'></p></div>
       <h2 class='chapterHead' id='mctestmoodlevpl'><span class='titlemark'>Capítulo 13</span><br /><a id='x30-17100013'></a>MCTest+Moodle+VPL</h2>
       <hr />
       <hr />
       <div class='tcolorbox mybox' id='tcolobox-119'>    
<div class='tcolorbox-title'>
       </div> 
<div class='tcolorbox-content'><p class='indent'><span class='cmbx-12x-x-120'>Conteúdo</span>___________________________________________________________________________
</p> 
 
</div> 
</div>
<p class='indent'>       Neste capítulo, serão apresentados resumos dos artigos que relatam os métodos e
experimentos de integração entre o MCTest e o Moodle, com foco especial na utilização do
<span class='cmti-12'>plugin </span>VPL. A maioria desses artigos já foi detalhada em capítulos anteriores deste livro e,
portanto, não será refeita a apresentação completa. Os experimentos foram realizados
principalmente nas disciplinas de Bases Computacionais da Ciência (CS0) e Processamento da
Informação (CS1) do Bacharelado em Ciência e Tecnologia da Universidade Federal do ABC
(UFABC).
<a id='x30-171001r307'></a>
       </p> 

       <h3 class='sectionHead' id='mctest-com-moodle'><span class='titlemark'>13.1   </span> <a id='x30-1720001'></a>MCTest-5, com Moodle</h3>
       <h4 class='likesubsectionHead' id='artigo-sobre-a-exportacao-de-questoes-parametricas-para-o-moodle-usando-o-mctest'><a id='x30-1730001'></a>Artigo sobre a exportação de questões paramétricas para o Moodle usando o MCTest</h4>
<p class='noindent'>O artigo de Zampirolli, Batista, Pimentel e Braga (2021) aborda a exportação de questões
paramétricas para o Moodle através do MCTest, apresentado em detalhes no Capítulo <a href='livroch9.xhtml#variacoes-de-exames-com-qmqt-para-o-moodle'>9<!-- tex4ht:ref: ch:examesQM_QT_Moodle  --></a> – <a href='livroch9.xhtml#variacoes-de-exames-com-qmqt-para-o-moodle'>Variações
de exames com QM+QT para o Moodle<!-- tex4ht:ref: ch:examesQM_QT_Moodle  --></a>. Neste capítulo, é explorada uma funcionalidade interessante do
MCTest que permite exportar variações de exames nos formatos Aiken e XML, os quais podem ser
utilizados pelo Moodle para criar um banco de questões.
</p> 
<p class='indent'>       Enquanto o Moodle suporta a criação de questões parametrizadas usando valores curinga, essas
questões possuem limitações em relação às funções disponíveis na linguagem PHP. Ao utilizar o
MCTest para criar o banco de questões, obtém-se uma vantagem, uma vez que ele suporta diversos tipos
de questões parametrizadas. Por exemplo, é possível criar um exame contendo QMs e QTs com
respostas exatas. Em seguida, o exame é configurado para gerar variações, salvando-o nos formatos
Aiken ou XML. Posteriormente, esses arquivos podem ser importados para o banco de questões do Moodle,
permitindo a criação de uma atividade com as questões recém-importadas. Dessa forma, é possível
criar atividades muito mais personalizadas, superando as limitações dos curingas oferecidos apenas pelo
Moodle.
</p> 
<p class='indent'>       O capítulo detalha a criação de um exame composto por três QMs paramétricas e uma QT
com resposta exata. Para cada questão, são fornecidos exemplos de implementação e explicação
                                                                                                  
                                                                                                  
sobre como o MCTest pode ser utilizado para gerar diferentes variações.
</p> 
<p class='indent'>       Além disso, são apresentados detalhes sobre o conteúdo dos arquivos nos formatos Aiken e
XML, utilizados para armazenar QMs e QTs com respostas exatas. É importante ressaltar a
necessidade de remover os comentários adicionados pelo MCTest nos arquivos Aiken antes de
importá-los para o Moodle. No caso dos arquivos XML, é enfatizada a complexidade da
sintaxe e a importância de remover os comentários em LaTeX presentes em cada questão no
MCTest. Deve-se também atentar para o formato utilizado, como fórmulas matemáticas,
que podem se tornar inválidas no Moodle devido à sua limitação na formatação de
questões.
<a id='x30-173001r309'></a>
       </p> 

       <h3 class='sectionHead' id='mctest-com-moodlevpl'><span class='titlemark'>13.2   </span> <a id='x30-1740002'></a>MCTest-5, com Moodle+VPL</h3>
<p class='noindent'>Durante a pandemia de COVID-19, o MCTest desempenhou um papel crucial ao permitir a avaliação
remota de milhares de estudantes, principalmente em disciplinas que envolvem exercícios de
programação (EP). Foram implementadas e validadas diversas funcionalidades em turmas
para viabilizar esse processo, com destaque para as principais melhorias apresentadas nesta
seção.
<a id='x30-174001r299'></a>
       </p> 

       <h4 class='subsectionHead' id='artigo-com-a-primeira-integracao-entre-mctestmoodlevpl'><span class='titlemark'>13.2.1   </span> <a id='x30-1750001'></a>Artigo com a primeira integração entre MCTest+Moodle+VPL</h4>
<p class='noindent'>Enquanto a Seção <a href='livroch12.xhtml#artigo-definindo-a-parametrizacao-do-mctest-apos-a-versao-'>12.1.3<!-- tex4ht:ref: sec:definindoParametrizacao  --></a> – <a href='livroch12.xhtml#artigo-definindo-a-parametrizacao-do-mctest-apos-a-versao-'>Artigo definindo a parametrização do MCTest após a versão 4<!-- tex4ht:ref: sec:definindoParametrizacao  --></a> resumiu a
primeira publicação sobre a parte paramétrica, a Seção <a href='livroch12.xhtml#artigo-apresentando-a-primeira-versao-web-do-mctest'>12.2.1<!-- tex4ht:ref: sec:MTest-5_web  --></a> – <a href='livroch12.xhtml#artigo-apresentando-a-primeira-versao-web-do-mctest'>Artigo apresentando a primeira
versão web do MCTest<!-- tex4ht:ref: sec:MTest-5_web  --></a> utilizou essa parametrização na versão web do MCTest. Nesta primeira
integração, as correções dos EPs eram realizadas manualmente. Isso envolvia baixar todas as
submissões dos estudantes, executar <span class='cmti-12'>scripts </span>para testar os códigos submetidos e, posteriormente, atribuir
as notas manualmente por parte dos professores. Nos resultados das próximas seções, somente
a criação de novas questões foi realizada de forma manual, conforme será detalhado a
seguir.
</p> 
<p class='indent'>       O artigo de Zampirolli, Pisani, Josko, Kobayashi, Silva, Goya e Savegnago (2020), resumido nesta
seção, apresenta uma solução para simplificar a criação e correção de questões paramétricas em
uma disciplina de Processamento da Informação (ou Introdução à Programação, IP, ou também
CS1) com abordagem de ensino híbrido (IP-BL – <span class='cmti-12'>blended learning</span>). A solução integra a
ferramenta de código aberto MCTest com o Moodle e o <span class='cmti-12'>plugin </span>VPL (<span class='cmti-12'>Virtual Programming Lab</span>)
(PINO, 2012), permitindo a geração e avaliação automática de questões paramétricas
relacionadas à linguagem de programação. Essa abordagem foi aplicada em duas turmas da
disciplina, totalizando 171 estudantes matriculados, e utilizou a linguagem de programação
Java.
       </p> 

                                                                                                  
                                                                                                  
       <h5 class='likesubsubsectionHead' id='metodo8'><a id='x30-1760001'></a>Método</h5>
<p class='noindent'>A primeira parte do artigo aborda a parametrização de QTs destinadas aos estudantes para serem
respondidas em folha de papel, com correção manual. A questão apresentada é uma variação do
teste de mesa, conforme demonstrado nos Códigos <a href='livroch5.xhtml#x20-68121r5'>5.5<!-- tex4ht:ref: lst:questaoQT_TesteMesaEx3Parte1  --></a> e <a href='livroch5.xhtml#x20-68219r6'>5.6<!-- tex4ht:ref: lst:questaoQT_TesteMesaEx3Parte2  --></a>. Esse tipo de questão foi incluído no Exame
1 da disciplina.
</p> 
<p class='indent'>       A segunda parte deste artigo apresenta uma questão parametrizada que pode ser submetida pelos
estudantes como atividade VPL no Moodle. Essa questão foi aplicada no Exame 2 e requer a resolução
utilizando uma linguagem de programação. Embora o IP-BL tenha adotado Java, qualquer linguagem de
programação suportada pelo VPL do Moodle pode ser utilizada para resolver a questão. O exemplo de
questão apresentado no artigo envolve um operador e dois vetores. O operador e o tamanho dos
vetores são parâmetros que podem ser modificados para obter vários modelos da mesma
questão.
</p> 
<p class='indent'>       A principal contribuição deste artigo é o uso de questões paramétricas com avaliação
automatizada usando o VPL. O MCTest produz questões paramétricas, conforme descrito nos capítulos
anteriores. No entanto, uma grande dificuldade para os professores em disciplinas de programação com
muitos estudantes é a correção e o <span class='cmti-12'>feedback</span>. O VPL veio para fornecer essa parte, mas até
então, sem abordar a parte paramétrica. Para resolver isso, o artigo apresentou um método
para automatizar o EP parametrizado, sendo a principal contribuição para o estado da arte
da Tecnologia da Informação e Comunicação (TIC) na educação apresentada neste
artigo.
</p> 
<p class='indent'>       O sistema padrão do VPL aceitava apenas uma única versão de uma questão, o que exigiria
criar uma avaliação prática de EP para cada versão de cada questão em um exame. Por
exemplo, em um exame com três questões, cada uma com seis variações, o professor precisaria
criar e configurar 18 avaliações práticas diferentes. Além disso, os estudantes precisam
escolher as versões corretas segundo as avaliações exclusivas, o que pode levar a confusões e
erros.
</p> 
<p class='indent'>       Utilizando o sistema modificado, o professor precisa criar três questões e 6 casos de teste. Em
seguida, o estudante precisa enviar um segundo arquivo TXT contendo uma única linha como “MODELO:
A”, que representa o modelo da questão, definida no PDF do exame. Esse arquivo de texto é analisado
utilizando uma expressão regular para isolar o código de modelo para aquele estudante, e em seguida, é
usado para escolher o modelo correto dos arquivos de casos de teste utilizados pelo professor.
Cada modelo tem seu próprio arquivo de casos de teste, que substitui o arquivo padrão do
VPL.
</p> 
<p class='indent'>       Após a criação de uma atividade do VPL no Moodle, em “Arquivos de execução”, o professor
precisa adicionar seis casos de teste e outros arquivos disponíveis em <a href='https://github.com/fzampirolli/mctest'>github.com/fzampirolli/mctest</a>, na
pasta <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>VPL_modification/V1-select_using_second_file</span></span></span>. Esses arquivos foram criados pelo Heitor
Rodrigues Savegnago e seu orientador Prof. Dr. Paulo Henrique Pisani.
</p> 
<p class='indent'>       Como o método apresentado no artigo já está ultrapassado, ele não será replicado neste livro.
No entanto, um método mais atualizado e aprimorado foi apresentado no Capítulo <a href='livroch10.xhtml#exames-com-mctestmoodlevpl'>10<!-- tex4ht:ref: ch:examesQT_VPL  --></a> – <a href='livroch10.xhtml#exames-com-mctestmoodlevpl'>Exames com
MCTest+Moodle+VPL<!-- tex4ht:ref: ch:examesQT_VPL  --></a>, eliminando a necessidade desses modelos.
                                                                                                  
                                                                                                  
       </p> 

       <h5 class='likesubsubsectionHead' id='experimentos9'><a id='x30-1770001'></a>Experimentos</h5>
<p class='noindent'>Nos primeiros quatro meses de 2019, a disciplina CS1 recebeu um total de 1.437 matrículas de
estudantes distribuídos em 46 turmas presenciais ou <span class='cmti-12'>blended learning </span>(IP-BL). As turmas
presenciais adotaram as linguagens de programação Java (36/46=78% das turmas) ou Python. Em
contraste, as turmas de IP-BL aplicaram uma combinação de pseudocódigo e Java (2/46=4%),
ou seja, os estudantes desenvolveram soluções em pseudocódigo (através da ferramenta
<a href='https://univali-lite.github.io/Portugol-Studio/'>Portugol Studio</a>) e as traduziram para código Java. O foco deste artigo é nas turmas de
IP-BL, onde a proposta foi aplicada em 2019. Analisando as ofertas anteriores, foi observado
uma melhora geral na oferta no primeiro período de 2019, quando o método do artigo foi
aplicado. No entanto, os autores não puderam afirmar que essa é a razão para o melhor
desempenho.
<a id='x30-177001r312'></a>
       </p> 

       <h4 class='subsectionHead' id='artigo-aplicando-a-integracao-mctestmoodlevpl-em-cs'><span class='titlemark'>13.2.2   </span> <a id='x30-1780002'></a>Artigo aplicando a integração MCTest+Moodle+VPL em CS0</h4>
<p class='noindent'>O artigo de Zampirolli, Sato, Savegnago, Batista e Kobayashi (2021) apresenta o contexto e desafios da
educação a distância devido à pandemia, destacando a adaptação de sistemas de código aberto,
como o Moodle e o MCTest. As principais contribuições são a melhoria das capacidades de
criação de atividades individualizadas e a integração do MCTest com o <span class='cmti-12'>plugin </span>VPL do
Moodle.
</p> 
<p class='indent'>       Neste artigo, é apresentado um método para criar e corrigir EPs parametrizados. A
contribuição principal consiste em gerar listas unificadas de exercícios paramétricos, para as quais
são produzidos casos de teste automaticamente. Esse método foi validado na disciplina de Bases
Computacionais da Ciência (CS0) durante a pandemia de COVID-19. As listas de exercícios
individualizados foram enviadas semanalmente por e-mail para os estudantes por uma adaptação do
sistema MCTest. A correção automática foi realizada por meio de uma adaptação no
<span class='cmti-12'>plugin </span>VPL do Moodle. Os recursos propostos foram utilizados por 28 turmas, totalizando 1.407
estudantes. Um questionário enviado aos estudantes revelou que cerca de 82% deles aprovaram o
método.
       </p> 

       <h5 class='likesubsubsectionHead' id='metodo9'><a id='x30-1790002'></a>Método</h5>
<p class='noindent'>Os Códigos <a href='livroch5.xhtml#x20-82061r12'>5.12<!-- tex4ht:ref: lst:questaoQT_EP_1_parte1  --></a> e <a href='livroch5.xhtml#x20-82195r13'>5.13<!-- tex4ht:ref: lst:questaoQT_EP_1_parte2  --></a> introduziram as QTs paramétricas com a integração MCTest+Moodle+ VPL, e
o Capítulo <a href='livroch10.xhtml#exames-com-mctestmoodlevpl'>10<!-- tex4ht:ref: ch:examesQT_VPL  --></a> – <a href='livroch10.xhtml#exames-com-mctestmoodlevpl'>Exames com MCTest+Moodle+VPL<!-- tex4ht:ref: ch:examesQT_VPL  --></a> apresentou o processo de criação de um exame
com essa integração. O artigo apresenta o primeiro experimento utilizando esse processo na disciplina
de Bases Computacionais da Ciência (CS0) na UFABC em 2020, que será resumido nesta
seção.
</p> 
<p class='indent'>       O artigo também apresenta exemplos de questões paramétricas e explica como compilar
o conteúdo das questões utilizando o MCTest. Foram realizadas melhorias em relação
à versão anterior do método, como a geração automática de questões agrupadas em
                                                                                                  
                                                                                                  
uma lista semanal em PDF enviada por e-mail para cada estudante, evitando a repetição de
exercícios, e a eliminação da necessidade de criação manual de casos de teste para cada
modelo.
</p> 
<p class='indent'>       Em resumo, o método utilizado para produzir as listas semanais foi o seguinte:
      </p> 
<dl class='enumerate-enumitem'><dt class='enumerate-enumitem'>
   1. </dt><dd class='enumerate-enumitem'>Elaborar questões conforme o modelo apresentado;
      </dd><dt class='enumerate-enumitem'>
   2. </dt><dd class='enumerate-enumitem'>Montar as questões em um Exame, especificando também as turmas;
      </dd><dt class='enumerate-enumitem'>
   3. </dt><dd class='enumerate-enumitem'>Escolher o formato “Json” ao selecionar “Criar-Variações” na página de Exame. Os casos
      de teste serão enviados por e-mail para o professor em um arquivo <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>*_linker.json</span></span></span>;
      </dd><dt class='enumerate-enumitem'>
   4. </dt><dd class='enumerate-enumitem'>Clicar no botão “Criar-PDF” do exame, escolhendo antes “Sim” para <span class='cmti-12'>feedback </span>ao estudante.
      O MCTest enviará ao professor o arquivo <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>*_students_variations.csv</span></span></span> que especifica qual
      variação foi selecionada para cada estudante;
      </dd><dt class='enumerate-enumitem'>
   5. </dt><dd class='enumerate-enumitem'>Mover ambos os arquivos para “Arquivos de Execução” em uma atividade VPL do Moodle,
      após  renomeá-los  como  <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>linker.json</span></span></span> e  <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>students_variations.csv</span></span></span>,  juntamente  com  os
      arquivos de adaptação do VPL disponíveis em <a href='https://github.com/fzampirolli/mctest'>github.com/fzampirolli/mctest</a>, na pasta
      <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>VPL_modification/V10-new_selector</span></span></span>;
      </dd><dt class='enumerate-enumitem'>
   6. </dt><dd class='enumerate-enumitem'>Esses arquivos incluem <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>makefile</span></span></span>, <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>vpl_evaluate.sh</span></span></span> e <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>zip.tar.gz.b64</span></span></span>.</dd></dl>
<p class='indent'>       Esses arquivos disponibilizados no GitHub também foram criados pelo Heitor Rodrigues Savegnago
e seu orientador Prof. Dr. Paulo Henrique Pisani.
       </p> 

       <h5 class='likesubsubsectionHead' id='experimentos10'><a id='x30-1800002'></a>Experimentos</h5>
<p class='noindent'>Devido à diversidade de critérios de avaliação adotados pelos vários professores, não foi possível
unificar a análise das 43 turmas de CS0 em 2020.2 em relação às notas finais.
</p> 
<p class='indent'>       Cada professor aplicou seu próprio critério para calcular as notas finais dos estudantes, seguindo
as regras da universidade, que incluíam dar pelo menos 72 horas para os estudantes enviarem suas
soluções de exames, o que ajudava em caso de limitações de acesso à internet. Alguns professores
optaram por utilizar apenas as listas unificadas para calcular as notas finais dos estudantes,
enquanto outros combinaram as listas com projetos em grupo, e alguns ainda incluíram exames
tradicionais.
</p> 
<p class='indent'>       Apesar da dificuldade de comparar os desempenhos, constatou-se que: (1) Os 505 estudantes das 15
turmas que não adotaram nenhum dos recursos obtiveram uma taxa de aprovação de 80%; (2) A mesma
taxa foi alcançada pelos 137 estudantes das quatro turmas que adotaram apenas o material unificado; (3)
                                                                                                  
                                                                                                  
Utilizando material e listas unificados, tratadas pelo MCTest+Moodle+VPL, 765 estudantes restantes das
24 turmas obtiveram uma taxa de aprovação de 81%. Esse número contrasta com a média histórica
anterior de 75%, calculada para 23.461 estudantes desde 2009. É importante destacar que a
disciplina CS0 em 2020.2 foi realizada 100% a distância pela primeira vez. Para contornar a
imprecisão devido aos diversos critérios de avaliação, no final de 2020.2, um questionário foi
enviado aos professores, tutores e estudantes para avaliar a metodologia proposta. Embora
apenas quatro professores e quatro tutores tenham retornado com seus comentários, foram
obtidas 443 respostas dos estudantes, o que foi bastante satisfatório, como apresentado no
artigo.
<a id='x30-180001r315'></a>
       </p> 

       <h4 class='subsectionHead' id='artigo-sobre-o-uso-de-multiplas-linguagens-de-programacao-em-cs'><span class='titlemark'>13.2.3   </span> <a id='x30-1810003'></a>Artigo sobre o uso de múltiplas linguagens de programação em CS1</h4>
<p class='noindent'>No artigo de Zampirolli, Teubl, Kobayashi, Neves, Rozante e Batista (2021), foi aplicado o mesmo
método apresentado anteriormente, na disciplina de Processamento da Informação (ou
Introdução à Programação, IP, ou também CS1) da UFABC, durante a pandemia. A
principal contribuição deste novo artigo foi disponibilizar material didático e avaliativo
em seis linguagens de programação para correção automática utilizando a integração
MCTest+Moodle+VPL.
       </p> 

       <h5 class='likesubsubsectionHead' id='metodo10'><a id='x30-1820003'></a>Método</h5>
<p class='noindent'>O método apresentado no artigo permite que cada estudante escolha sua linguagem de programação
preferida para aprender lógica de programação. O material didático é disponibilizado em várias
linguagens por meio de <span class='cmti-12'>notebooks </span>no Colab. Além disso, os estudantes podem optar por diferentes
linguagens de programação para praticar com exercícios e enviar suas soluções como códigos de
programação. As soluções são individualizadas devido ao uso de questões paramétricas geradas
com a integração MCTest+Moodle+VPL.
</p> 
<p class='indent'>       A geração automática do material didático para seis linguagens de programação é detalhada
no artigo, utilizando o conteúdo do livro “Processando a Informação” de Neves e Zampirolli (2017). O
livro possui sete capítulos que abordam conceitos fundamentais, estruturação de código, condicionais,
laços, vetores, matrizes e tópicos avançados. Para cada um dos seis primeiros capítulos, foram criados
arquivos no formato <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>ipynb</span></span></span> contendo as notas de aula e exemplos em várias linguagens. Além disso,
foram criados <span class='cmti-12'>notebooks </span>para as listas de exercícios práticos, todos armazenados na pasta
“all” (ver Figura <a href='#x30-182001r1'>13.1<!-- tex4ht:ref: fig:pastaAll  --></a>) do Google Drive disponibilizado pela Editora da UFABC, no seguinte
endereço:<br class='newline' />
</p> 
<p class='noindent'>   <a class='url' href='https://editora.ufabc.edu.br/matematica-e-ciencias-da-computacao/58-processando-a-informacao'>https://editora.ufabc.edu.br/matematica-e-ciencias-da-computacao/58-processando-a-informacao</a><br class='newline' />
       </p> 
<figure class='figure'> 

                                                                                                  
                                                                                                  
                                                                                                  
                                                                                                  
<p class='indent' id='-a-estrutura-de-arquivos-e-pastas-b-recorte-da-estrutura-de-arquivos-e-pastas-gerados-automaticamente-detalhando-a-pasta-py-para-python-fonte-zampirolliteublea-'>(a)
   <img alt='PIC' height='189' src='./figs-br//cap13_fig01.png' width='189' /> (b)
     <img alt='PIC' height='271' src='./figs-br//cap13_fig03.png' width='271' /> <a id='x30-182001r1'></a>
<a id='x30-182002'></a>
</p> 
<figcaption class='caption'><span class='id'>Figura 13.1: </span><span class='content'>(a) estrutura de arquivos e pastas; (b) recorte da estrutura de arquivos e pastas gerados
automaticamente, detalhando a pasta <span class='cmtt-12'>1.py </span>para Python. Fonte: Zampirolli, Teubl, Kobayashi, Neves,
Rozante e Batista (2021).                                                                        </span></figcaption><!-- tex4ht:label?: x30-182001r13  -->
                                                                                                  
                                                                                                  
       </figure>
<p class='indent'>       Em cada arquivo <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>ipynb</span></span></span> da pasta “all” da Figura <a href='#x30-182001r1'>13.1<!-- tex4ht:ref: fig:pastaAll  --></a>, a primeira linha de cada célula, seja de texto
ou código, pode conter a(s) linguagem(ns) de programação escolhida(s) para o conteúdo daquela
célula. Isso segue a sintaxe <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>#[tipo1]#[tipo2]#...#[tipon]#</span></span></span>, em que <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>tipoi</span></span></span> é a extensão do arquivo
do código na linguagem escolhida.
</p> 
<p class='indent'>       O filtro <span class='obeylines-h'><span class='verb'><span class='cmtt-12'>filterNotebook.py</span></span></span>, disponível em <a href='https://github.com/fzampirolli/filterNotebook'>github.com/fzampirolli/filterNotebook</a>, permite filtrar
<span class='cmti-12'>notebooks </span>com base na linguagem de programação e convertê-los para os formatos HTML, LaTeX e
PDF. Essa ferramenta suporta várias linguagens de programação, e o número de combinações
possíveis depende do número de linguagens definidas.
       </p> 

       <h5 class='likesubsubsectionHead' id='experimentos11'><a id='x30-1830003'></a>Experimentos</h5>
<p class='noindent'>O método foi validado em 5 turmas remotas, totalizando 223 estudantes, com uma taxa média de
aprovação de 90%. Ele se mostrou facilmente adaptável e oferece flexibilidade aos estudantes,
possibilitando uma abordagem mais personalizada no processo de aprendizagem de programação.
</p> 
<p class='indent'>       Os estudantes da disciplina CS1 foram divididos em dois grupos. O Grupo 1 teve aulas síncronas
(teóricas e práticas) e os estudantes foram obrigados a gravar vídeos explicativos para as
atividades. O Grupo 2 teve aulas assíncronas e os estudantes não foram obrigados a gravar
vídeos explicativos. Os resultados do questionário aplicado aos estudantes mostraram que o
Grupo 1 teve uma avaliação mais positiva da disciplina do que o Grupo 2. Em particular,
os estudantes do Grupo 1 ficaram mais satisfeitos com as aulas síncronas, com o material
didático e com as avaliações. A análise estatística também mostrou que o método
aplicado ao Grupo 1 foi estatisticamente melhor do que o método aplicado ao Grupo 2. Os
estudantes dos dois grupos concordaram que a disciplina foi importante para aprender sobre
programação e o conhecimento de várias linguagens de programação é útil para a carreira
profissional.
</p> 
<p class='indent'>       Os resultados deste estudo sugerem que as aulas síncronas podem ser uma forma eficaz de ensinar
programação. No entanto, é importante que as aulas síncronas sejam bem planejadas e os estudantes
sejam motivados a participar.
<a id='x30-183001r318'></a>
       </p> 

       <h4 class='subsectionHead' id='artigo-aplicando-a-integracao-mctestmoodlevpl-em-cs1'><span class='titlemark'>13.2.4   </span> <a id='x30-1840004'></a>Artigo aplicando a integração MCTest+Moodle+VPL em CS1</h4>
<p class='noindent'>O artigo de Zampirolli, Josko, Venero, Kobayashi, Silva, Goya e Savegnago (2021), publicado na revista
<span class='cmti-12'>Computer Applications in Engineering Education </span>e resumido nesta seção, descreve um experimento
significativo envolvendo a implementação do método apresentado na Seção <a href='#artigo-com-a-primeira-integracao-entre-mctestmoodlevpl'>13.2.1<!-- tex4ht:ref: sec:MCTest-5web  --></a> – <a href='#artigo-com-a-primeira-integracao-entre-mctestmoodlevpl'>Artigo com a
primeira integração entre MCTest+Moodle+VPL<!-- tex4ht:ref: sec:MCTest-5web  --></a> (ZAMPIROLLI, 2020). Esse estudo complementa um
artigo anterior publicado na mesma revista, resumido na Seção <a href='livroch12.xhtml#artigo-comparando-as-modalidades-semipresencial-e-presencial-cs-com-base-na-utilidade-do-mctest'>12.1.2<!-- tex4ht:ref: sec:experMCTest-4revista  --></a> – <a href='livroch12.xhtml#artigo-comparando-as-modalidades-semipresencial-e-presencial-cs-com-base-na-utilidade-do-mctest'>Artigo comparando as
modalidades semipresencial e presencial CS1 com base na utilidade do MCTest-4<!-- tex4ht:ref: sec:experMCTest-4revista  --></a> (ZAMPIROLLI,
2018).
                                                                                                  
                                                                                                  
</p> 
<p class='indent'>       Nesse novo estudo, a integração MCTest+Moodle+VPL foi incorporada como parte do processo
de ensino e avaliação na disciplina CS1. Inicialmente, tentou-se publicar tanto o método quanto o
experimento em um único artigo nesta revista. No entanto, os revisores consideraram o conteúdo muito
denso, o que levou à separação em dois artigos distintos: Zampirolli, Pisani, Josko, Kobayashi, Silva,
Goya e Savegnago (2020) e Zampirolli, Josko, Venero, Kobayashi, Silva, Goya e Savegnago
(2021).
       </p> 

       <h5 class='likesubsubsectionHead' id='metodo11'><a id='x30-1850004'></a>Método</h5>
<p class='noindent'>A principal característica da abordagem consiste na implementação da avaliação automatizada
(AA) em uma disciplina CS1 com várias turmas. Esse método engloba a formulação de
questões individuais para cada estudante e a disponibilização de avaliação e <span class='cmti-12'>feedback</span>
automáticos.
</p> 
<p class='indent'>       Para a realização da avaliação unificada, foram empregadas questões paramétricas e
respostas (nos casos de QMs) através do MCTest. Essa estratégia possibilitou a combinação de
distintos tipos de questões para gerar um exame personalizado para cada estudante. Já para as QTs, foi
utilizada a integração MCTest+Moodle+VPL, na qual os estudantes tiveram que submeter EPs em
atividades VPL do Moodle.
</p> 
<p class='indent'>       Importante destacar que todo o processo avaliativo utilizado neste artigo foi previamente detalhado e
exemplificado em capítulos anteriores deste livro. Além disso, é possível criar várias turmas pelo
coordenador de disciplina, conforme detalhado na Seção <a href='livroch3.xhtml#criar-varias-turmas-com-arquivo-csv'>3.2.2<!-- tex4ht:ref: sec:variasTurmasCSV  --></a> – <a href='livroch3.xhtml#criar-varias-turmas-com-arquivo-csv'>Criar várias turmas com arquivo CSV<!-- tex4ht:ref: sec:variasTurmasCSV  --></a>.
Da mesma forma, é explicado no Capítulo <a href='livroch6.xhtml#visao-geral-dos-exames'>6<!-- tex4ht:ref: ch:exames  --></a> – <a href='livroch6.xhtml#visao-geral-dos-exames'>Visão geral dos exames<!-- tex4ht:ref: ch:exames  --></a> como enviar um exame também
para várias turmas.
       </p> 

       <h5 class='likesubsubsectionHead' id='experimentos12'><a id='x30-1860004'></a>Experimentos</h5>
<p class='noindent'>A principal característica do experimento realizado é a capacidade de aplicar AA e exames unificados
parametrizados em diferentes linguagens de programação, utilizando as ferramentas de código aberto
MCTest e Moodle (com o <span class='cmti-12'>plugin </span>VPL). No primeiro trimestre de 2019, 19 das 44 turmas (presenciais)
adotaram a abordagem, alcançando uma taxa de aprovação mais alta (67,5%) em comparação
com as turmas que não utilizaram a solução de AA (59,1%), mantendo uma dispersão
padrão semelhante. Resultados preliminares também indicaram uma forte correlação linear
entre a taxa de aprovação e a média das notas nas AA. Nas turmas de aprendizagem mista
(<span class='cmti-12'>blended learning</span>), duas turmas utilizaram o método nos exames unificados, com uma taxa de
aprovação de 70,4%. Esses resultados corroboram estudos anteriores, indicando que a avaliação
contínua combinada com <span class='cmti-12'>feedback </span>imediato pode contribuir para o processo de aprendizagem dos
estudantes.
<a id='x30-186001r322'></a>
       </p> 

       <h4 class='subsectionHead' id='artigo-explorando-a-integracao-de-jogos-no-ensino-de-cs'><span class='titlemark'>13.2.5   </span> <a id='x30-1870005'></a>Artigo explorando a integração de jogos no ensino de CS0</h4>
<p class='noindent'>O artigo de Josko e Zampirolli (2023) discute uma intervenção pedagógica que emprega elementos de
                                                                                                  
                                                                                                  
gamificação para a introdução de conceitos de lógica de programação em estudantes. No estudo, os
autores realizaram um estudo de caso envolvendo 48 alunos matriculados no curso introdutório de
programação (CS0) intitulado Bases Computacionais da Ciência, parte do programa de Bacharelado em
Ciência e Tecnologia da UFABC. Importante ressaltar que o curso foi ministrado <span class='cmti-12'>online </span>devido à
pandemia.
       </p> 

       <h5 class='likesubsubsectionHead' id='metodo12'><a id='x30-1880005'></a>Método</h5>
<p class='noindent'>A intervenção pedagógica consistiu em construir gradualmente um jogo simples utilizando a biblioteca
Pygame (<a href='https://www.pygame.org/news'>pygame.org</a>) do Python no Google Colab (<a href='https://colab.google/'>colab.google</a>). Conceitos como instruções
sequenciais, bibliotecas, estruturas de decisão e de repetição, além de simulações, foram
introduzidos à medida que novas funcionalidades eram incluídas no jogo. Além disso, foram
utilizadas avaliações automáticas e <span class='cmti-12'>feedback </span>para os estudantes, conforme relatado em outro
artigo descrito na Seção <a href='#artigo-aplicando-a-integracao-mctestmoodlevpl-em-cs'>13.2.2<!-- tex4ht:ref: sec:mctest_cs0_2021  --></a> – <a href='#artigo-aplicando-a-integracao-mctestmoodlevpl-em-cs'>Artigo aplicando a integração MCTest+Moodle+VPL em
CS0<!-- tex4ht:ref: sec:mctest_cs0_2021  --></a>.
       </p> 

       <h5 class='likesubsubsectionHead' id='experimentos13'><a id='x30-1890005'></a>Experimentos</h5>
<p class='noindent'>Os autores aplicaram um questionário para capturar as perspectivas dos estudantes sobre a abordagem. As
análises sugeriram que os elementos de gamificação melhoraram a motivação em relação aos
tópicos do curso. Adicionalmente, a taxa de reprovação do grupo estudado foi menor do que a média
de outras turmas no período da pandemia.
</p> 
<p class='indent'>       Assim, a intervenção recebeu <span class='cmti-12'>feedback </span>positivo dos estudantes. Entretanto, os autores afirmam que
estudos controlados com maiores amostras são necessários para avaliar plenamente a efetividade da
abordagem.
<a id='x30-189001r311'></a>
       </p> 

       <h3 class='sectionHead' id='consideracoes-finais11'><span class='titlemark'>13.3   </span> <a id='x30-1900003'></a>Considerações finais</h3>
<p class='noindent'>Neste capítulo, foram apresentados vários artigos que relatam experiências importantes com a
integração do MCTest com o Moodle e o <span class='cmti-12'>plugin </span>VPL. Essas integrações permitiram a avaliação
automatizada de EPs em diversas disciplinas, com destaque para:
       </p> 

      <ul class='itemize1'>
      <li class='itemize'>Criação de QTs paramétricas e de QMs corrigidas manualmente e automaticamente;
      </li>
      <li class='itemize'>Exportação de questões do MCTest para o banco de questões do Moodle, superando
      limitações;
                                                                                                  
                                                                                                  
      </li>
      <li class='itemize'>Geração de listas unificadas de EPs paramétricos com casos de teste automatizados;
      </li>
      <li class='itemize'>Disponibilização de material didático e avaliativo em várias linguagens de programação;
      </li>
      <li class='itemize'>Uso de avaliação contínua e <span class='cmti-12'>feedback </span>imediato, resultando em maior taxa de aprovação.</li></ul>
<p class='indent'>       Os artigos apresentam a evolução e aprimoramentos dessas integrações ao longo do tempo.
Além disso, foi observado que as turmas que utilizaram os métodos propostos tiveram um
desempenho melhor. No entanto, é difícil afirmar que essa foi a única razão para o melhor
desempenho.
</p> 
<p class='indent'>       Portanto, é possível concluir que as abordagens propostas neste capítulo se mostraram eficazes e
práticas, especialmente no contexto de ensino remoto durante a pandemia COVID-19. Essas integrações
abrem novas possibilidades para oferecer avaliações personalizadas, automatizadas e flexíveis em
diversas disciplinas, como as de programação.
                                                                                                  
                                                                                                  
                                                                                                  
                                                                                                  
                                                                                                  
                                                                                                  
</p> 
<p class='indent'>
                                                                                                  
                                                                                                  
                                                                                                  
                                                                                                  
                                                                                                  
                                                                                                  
       </p> 
<!-- l. 1 --><div class='crosslinks'><p class='noindent'></p></div>
        
</body> 
</html>